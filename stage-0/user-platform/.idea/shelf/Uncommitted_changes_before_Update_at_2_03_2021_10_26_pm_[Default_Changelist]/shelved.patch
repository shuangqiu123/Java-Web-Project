Index: user-web/src/main/java/org/geektimes/projects/user/repository/DatabaseUserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//package org.geektimes.projects.user.repository;\r\n//\r\n//import org.geektimes.projects.user.domain.User;\r\n//\r\n//import javax.naming.Context;\r\n//import javax.sql.DataSource;\r\n//import java.util.Collection;\r\n//\r\n//public class DatabaseUserRepository implements UserRepository {\r\n//\r\n//    private final DataSource dataSource;\r\n//\r\n//    public DatabaseUserRepository(DataSource dataSource) {\r\n//        this.dataSource = dataSource;\r\n//    }\r\n//\r\n//    public DatabaseUserRepository() {\r\n//        this.dataSource = initDataSource();\r\n//    }\r\n//\r\n//    private DataSource initDataSource() {\r\n//        Context context = new DefaultContext();\r\n//        return (DataSource) context.lookup(\"jdbc/UserPlatformDB\");\r\n//    }\r\n//\r\n//    @Override\r\n//    public boolean save(User user) {\r\n//        return false;\r\n//    }\r\n//\r\n//    @Override\r\n//    public boolean deleteById(Long userId) {\r\n//        return false;\r\n//    }\r\n//\r\n//    @Override\r\n//    public boolean update(User user) {\r\n//        return false;\r\n//    }\r\n//\r\n//    @Override\r\n//    public User getById(Long userId) {\r\n//        return null;\r\n//    }\r\n//\r\n//    @Override\r\n//    public User getByNameAndPassword(String userName, String password) {\r\n//        return null;\r\n//    }\r\n//\r\n//    @Override\r\n//    public Collection<User> getAll() {\r\n//        return null;\r\n//    }\r\n//}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- user-web/src/main/java/org/geektimes/projects/user/repository/DatabaseUserRepository.java	(revision d4a01a3fafdb93fb7354ddf132dd2366dbbc9cde)
+++ user-web/src/main/java/org/geektimes/projects/user/repository/DatabaseUserRepository.java	(date 1614684389700)
@@ -1,55 +1,55 @@
-//package org.geektimes.projects.user.repository;
-//
-//import org.geektimes.projects.user.domain.User;
-//
-//import javax.naming.Context;
-//import javax.sql.DataSource;
-//import java.util.Collection;
-//
-//public class DatabaseUserRepository implements UserRepository {
-//
-//    private final DataSource dataSource;
-//
-//    public DatabaseUserRepository(DataSource dataSource) {
-//        this.dataSource = dataSource;
-//    }
-//
-//    public DatabaseUserRepository() {
-//        this.dataSource = initDataSource();
-//    }
-//
-//    private DataSource initDataSource() {
-//        Context context = new DefaultContext();
-//        return (DataSource) context.lookup("jdbc/UserPlatformDB");
-//    }
-//
-//    @Override
-//    public boolean save(User user) {
-//        return false;
-//    }
-//
-//    @Override
-//    public boolean deleteById(Long userId) {
-//        return false;
-//    }
-//
-//    @Override
-//    public boolean update(User user) {
-//        return false;
-//    }
-//
-//    @Override
-//    public User getById(Long userId) {
-//        return null;
-//    }
-//
-//    @Override
-//    public User getByNameAndPassword(String userName, String password) {
-//        return null;
-//    }
-//
-//    @Override
-//    public Collection<User> getAll() {
-//        return null;
-//    }
-//}
+package org.geektimes.projects.user.repository;
+
+import org.geektimes.projects.user.domain.User;
+
+import javax.naming.Context;
+import javax.sql.DataSource;
+import java.util.Collection;
+
+public class DatabaseUserRepository implements UserRepository {
+
+    private final DataSource dataSource;
+
+    public DatabaseUserRepository(DataSource dataSource) {
+        this.dataSource = dataSource;
+    }
+
+    public DatabaseUserRepository() {
+        this.dataSource = initDataSource();
+    }
+
+    private DataSource initDataSource() {
+        Context context = new DefaultContext();
+        return (DataSource) context.lookup("jdbc/UserPlatformDB");
+    }
+
+    @Override
+    public boolean save(User user) {
+        return false;
+    }
+
+    @Override
+    public boolean deleteById(Long userId) {
+        return false;
+    }
+
+    @Override
+    public boolean update(User user) {
+        return false;
+    }
+
+    @Override
+    public User getById(Long userId) {
+        return null;
+    }
+
+    @Override
+    public User getByNameAndPassword(String userName, String password) {
+        return null;
+    }
+
+    @Override
+    public Collection<User> getAll() {
+        return null;
+    }
+}
